require 'ruby_parser'

RSpec.describe Pentest::AstUtils do
  describe '.is_params?' do
    subject { ->(code) { Pentest::AstUtils.is_params?(RubyParser.new.parse(code)) } }
    it 'matches usage of params call' do
      expect(subject.call 'params').to eql(true)
      expect(subject.call 'params(1)').to eql(true)
      expect(subject.call 'params[:hoge]').to eql(false)
      expect(subject.call 'hoge').to eql(false)
    end
  end

  describe '.get_params_key' do
    subject { ->(code) { Pentest::AstUtils.get_params_key(RubyParser.new.parse(code)) } }
    it 'extracts key-retrival call of params method' do
      expect(subject.call 'params[:hoge]').to eql(:hoge)
      expect(subject.call 'params[100]').to eql(100)
      expect(subject.call 'params["piyo"]').to eql(:piyo)
      expect(subject.call 'hoge').to eql(nil)
    end
  end

  describe '.search_for_params' do
    subject { ->(code) { Pentest::AstUtils.search_for_params(RubyParser.new.parse(code)) } }
    it 'returns list of params call and its usage as a set' do
      expect(subject.call 'params[:hoge]').to eql(Set[
        [:hoge, nil, nil],
      ])
      expect(subject.call 'params[:hoge][:fuga]').to eql(Set[
        [:hoge, :callee, :[], Sexp.from_array([:lit, :fuga])],
      ])
      expect(subject.call 'params[:hoge] == params[:fuga]').to eql(Set[
        [:hoge, :callee, :==, Sexp.from_array([:call, [:call, nil, :params], :[], [:lit, :fuga]])],
        [:fuga, :call_arg, Sexp.from_array([:call, [:call, nil, :params], :[], [:lit, :hoge]]), :==],
      ])
      expect(subject.call 'params[:hoge] == "piyo"').to eql(Set[
        [:hoge, :callee, :==, Sexp.from_array([:str, "piyo"])],
      ])
    end
  end
end