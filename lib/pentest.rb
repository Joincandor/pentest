require "pentest/version"
require "pentest/runner"
require "pentest/logger"
require "pentest/ruby_parser"
require "pentest/ast_utils"
require "pentest/checkers"
require "pentest/dsl"

module Pentest
  class Error < StandardError; end

  #Run Pentest scan. Returns Tracker object.
  #
  #Options:
  #
  #  * :app_path - path to root of Rails app (required)
  class << self
    @@setups = []

    def run options
      Logger.debug "launched"

      ENV['RAILS_ENV'] ||= 'test'

      Logger.debug "Loading Rails project..."
      @app_path = File.expand_path(options[:app_path])

      # TODO: Check if app_path directory exists
      # TODO: Check if app_path directory is valid rails project
      # TODO: Detect rails version
      require File.expand_path('config/environment', @app_path)

      unless is_project_loaded?
        # TODO: handle
      end

      Logger.debug "Loaded Rails project #{get_project_name.inspect}"

      # TODO: Check if Pentestfile exists
      pentestfile_path = options[:pentestfile] || 'Pentestfile'

      Logger.debug "Loading #{pentestfile_path}..."
      load_pentestfile(pentestfile_path)

      Logger.debug "Initializing scanner..."
      runner = Runner.new(@app_path, @@setups)

      runner.run
    end
    
    def is_project_loaded?
      defined?(::Rails)
    end

    def get_project_name
      if defined?(::Rails)
        ::Rails.application.class.parent_name
      end
    end

    def add_setup(*args, &block)
      @@setups << block
    end

    private

    def load_pentestfile(pentestfile_path)
      load(File.expand_path(pentestfile_path, @app_path))
    end
  end
end
