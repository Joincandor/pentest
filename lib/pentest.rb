require "pentest/initializer"

require "pentest/version"
require "pentest/runner"
require "pentest/logger"
require "pentest/ruby_parser"
require "pentest/ast_utils"
require "pentest/checkers"
require "pentest/dsl"

module Pentest
  class Error < StandardError; end

  #Run Pentest scan. Returns Tracker object.
  #
  #Options:
  #
  #  * :app_path - path to root of Rails app (required)
  class << self
    @@hooks = {before_attacks: [], setups: []}

    def run options
      Logger.debug "launched"

      ENV['RAILS_ENV'] ||= 'test'

      Logger.debug "Loading Rails project..."
      @app_path = File.expand_path(options[:app_path])

      unless File.directory?(@app_path)
        Logger.error "#{options[:app_path]} is not valid directory."
        return :error
      end

      environment_path = File.expand_path('config/environment.rb', @app_path)

      unless File.file?(environment_path)
        Logger.error "Your project does not contain config/environment.rb file, which must be exist on every valid Rails project. Check your configuration."
        return :error
      end

      require environment_path

      unless is_project_loaded?
        Logger.error "Rails project not loaded. Check if your config/environment.rb file is valid."
        return :error
      end

      Logger.debug "Loaded Rails project #{get_project_name.inspect} (Rails #{Rails::VERSION::STRING})"

      # TODO: Check if Pentestfile exists
      pentestfile_path = options[:pentestfile] || 'Pentestfile'

      Logger.debug "Loading #{pentestfile_path}..."
      load_pentestfile(pentestfile_path)

      Logger.debug "Initializing scanner..."
      runner = Runner.new(@app_path, @@hooks)

      runner.run
    end

    def is_project_loaded?
      defined?(::Rails)
    end

    def get_project_name
      if defined?(::Rails)
        ::Rails.application.class.module_parent_name
      end
    end

    def add_setup(*args, &block)
      @@hooks[:setups] << block
    end

    def add_before_attack(*args, &block)
      @@hooks[:before_attacks] << block
    end

    private

    def load_pentestfile(pentestfile_path)
      load(File.expand_path(pentestfile_path, @app_path))
    end
  end
end
