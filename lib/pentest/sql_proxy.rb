require 'arproxy'

module Pentest
  class SqlProxy < Arproxy::Base
    @handlers = nil
    @parser = nil

    def self.enable!(handler)
      Arproxy.configure do |config|
        config.use self
        config.adapter_class.class_eval do
          attr_accessor :handler
          @@handler = handler
          def exec_query_proxy(*args)
            sql, = args
            unless @@handler.nil?
              @@handler.call(sql)
            end
            self.exec_query_original(*args)
          end
          alias_method :exec_query_original, :exec_query
          alias_method :exec_query, :exec_query_proxy
        end
      end
      Arproxy.enable!
      Arproxy.proxy_chain.head.register_handler(handler)
    end

    def self.disable!(handler)
      Arproxy.configure do |config|
        config.adapter_class.class_eval do
          alias_method :exec_query, :exec_query_original
        end
      end
      Arproxy.proxy_chain.head.unregister_handler(handler)
      Arproxy.disable!
    end

    def initialize
      @handler = nil
    end

    def register_handler(handler)
      @handler = handler
    end

    def unregister_handler(handler)
      @handler = nil
    end

    def execute(*args)
      sql, = args
      unless @handler.nil?
        @handler.call(sql)
      end
      super(*args)
    end
  end
end