require 'pentest/checkers'

module Pentest
  class Endpoint
    def initialize(route)
      @route = route

      @controller = route.defaults[:controller]
      @action = route.defaults[:action]

      return if @controller.nil? || @action.nil?

      @controller_name = ::ActiveSupport::Inflector.camelize(@controller) + "Controller"
      @controller_class = ::ActiveSupport::Inflector.constantize(@controller_name)
    end

    def valid?
      !@controller.nil? && !@action.nil? && @controller_class.method_defined?(@action.to_sym)
    end

    def scan!
      params = get_params

      Logger.info "#{@route.verb} #{path}"
      Logger.debug "Attacking #{@controller_class.inspect}##{@action}...", timestamp: false
      Logger.debug "Detected Parameters: #{params.to_a.inspect}", timestamp: false
    end

    private

    def method
      @controller_class.instance_method(@action.to_sym)
    end

    def path(options = {})
      @route.required_parts.each do |part|
        options[part] ||= ":#{part}"
      end

      @route.format(options)
    end

    def get_params
      exp = RubyParser.get_sexp(method)
      param_usages = AstUtils.search_for_params(exp)
      deep_parameters = Set.new
      non_deep_parameters = Set.new

      param_usages.each do |param, type, method, arg|
        if type == :callee && method == :[]
          deep_parameters << [ param, arg[1] ]
        else
          non_deep_parameters << param
        end
      end

      non_deep_parameters += @route.required_parts.map(&:to_sym)
      non_deep_parameters -= deep_parameters.map {|a| a[0]}
      deep_parameters.to_a + non_deep_parameters.map {|param| [param]}
    end
  end
end