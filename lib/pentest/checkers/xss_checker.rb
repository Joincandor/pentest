require 'pentest/checkers/base_checker'
require 'pentest/payload'
require 'term/ansicolor'
require 'pairwise'

class Pentest::XssChecker < Pentest::BaseChecker
  Pentest::Checkers.add self

  @description = "Checks for Cross-Site Scripting"

  SQLI_PAYLOADS = File.read(File.expand_path('../fuzzers/xss.txt', File.dirname(__FILE__)), encoding: 'utf-8').lines.map(&:strip).select {|l| l.size > 5 && l =~ /\W/}
  CRACKER_PAYLOAD = %q(>>>"""'&<<<<"'&)

  def initialize(endpoint, params)
    super(endpoint, params)
  end

  def attack(param, injection_point, ingredients)
    preattack_payloads = generate_preattack_payloads(@params, ingredients, injection_point)

    errors = []

    penetrated_payload = nil
    preattack_payloads.shuffle.each do |payload|
      request, response, err = dispatch(payload)
      status = get_status(err) || response.status

      Pentest::Logger.put_progress (status / 100).to_s

      errors << normalize_error(err, payload)

      if ::ActiveRecord::StatementInvalid === err
        payload.penetration_type = 'Cross-Site Scripting Vulnerability'
        payload.penetration_confidence = :preattack
        penetrated_payload = payload
        break
      end
    end

    [penetrated_payload, errors]
  end

  def generate_preattack_payloads(params, seeds, injection_point)
    values_list = if params.size - 1 <= 0
      [[]]
    elsif params.size - 1 == 1
      seeds.map {|s| [s]}
    else
      Pairwise.combinations(*([seeds] * (params.size - 1)))
    end

    values_list.map do |values|
      values.insert(injection_point, CRACKER_PAYLOAD)

      Pentest::Payload.new(
        params: params,
        route: @route,
        values: values,
        injection_point: injection_point,
        injection: CRACKER_PAYLOAD,
      )
    end.take(50)
  end
end