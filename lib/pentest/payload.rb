module Pentest
  class Payload
    attr_accessor :params, :values, :penetration_confidence, :injection, :penetration_message

    def initialize(data = {})
      @params = data.fetch(:params, [])
      @values = data.fetch(:values, [])
      @injection = data.fetch(:injection, '')
      @injection_point = data.fetch(:injection_point, nil)

      @penetration_confidence = nil
      @penetration_message = nil
      @penetration_type = nil
    end

    def params_hash
      @params.zip(@values).to_h
    end

    def to_s
      params_hash.each_with_index do |(param, value), index|
        param, = param_parts

        if route.required_parts.include? param
          options[param] = value
        else
          if position == index
            if penetrated_injections.has_key? position
              payload, = penetrated_injections[position]
              query_parameters << [param_parts, URI.encode(payload).red]
            else
              query_parameters << [param_parts, '[malicious payload]'.red]
            end
          else
            query_parameters << [param_parts, URI.encode(value)]
          end
        end
      end

      puts "#{' ' * 6} #{route.verb} #{route.format(options)}"
      query_parameters.each_with_index do |param, index|
        param_parts, value = param

        key = if param_parts.size == 1
          param_parts[0]
        else
          "#{param_parts[0]}[#{param_parts[1]}]"
        end

        puts "#{' ' * (7 + route.verb.size)} #{index == 0 ? '?' : '&'}#{key}=#{value}"
      end
    end
  end
end