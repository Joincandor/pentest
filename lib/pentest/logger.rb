require 'date'
require 'term/ansicolor'

module Pentest
  module Logger
    PADDING = ' ' * 10
    MAX_WIDTH = 60

    @@progress_counter = 0

    class << self
      def debug(text, timestamp: true)
        puts "#{time(timestamp)} #{Term::ANSIColor.blue(text)}"
      end

      def info(text, timestamp: true)
        puts "#{time(timestamp)} #{Term::ANSIColor.green(text)}"
      end

      def warn(text, timestamp: true)
        puts "#{time(timestamp)} #{Term::ANSIColor.yellow(text)}"
      end

      def error(text, timestamp: true)
        puts "#{time(timestamp)} #{Term::ANSIColor.red(text)}"
      end

      def time(enabled = true)
        return PADDING unless enabled
        now = Time.now
        "[#{now.strftime("%H:%M:%S")}]"
      end

      def start_progress
        print PADDING + ' '
        @@progress_counter = 0
      end

      def put_progress(char)
        if @@progress_counter + char.size > MAX_WIDTH
          print "\n"
          print PADDING + ' '
          @@progress_counter = 0
        end

        print char
        @@progress_counter += char.size
      end

      def end_progress
        print "\n"
      end

      def print_seperator 
        print "\n"
      end
    end
  end
end